1. без интернет

1.1 статична БД с една карта
1.2 БД със записване в паметта
- да се направи проучване как може да се реализира това
- пручване как ще се обхожда базата

2. интернет връзка

2.1 къде ще се съхраняват данните на сървъра - организиране на лога
2.2 как ще изглежда UI за работата с картите

 Blynk

Parking system: Malin, Blago, Bogdan, Radmil, Mariyah
Access control: Malin, Blago, Bogdan, Dani, Vasil

Паркинг система 24.03 call:

Говорихме за това как изглежда реализацията на проекта. Нямаме някакви изисквания, трябва ние да си определим какви са спецификациите. Относно прототипната версия, ще ползваме Raspberry Pi 3 или 4, с камера модул. 

Процеса включва заснемане на колата, когато е отпред; минаване през няколко алготитъма за обработка на изображения, за да се извлече накрая номера на колата в текстов вариант, и проверка на номера в база данни + сигнал за отваряне на бариерата.

Богдан е направил хубаво и подробно проучване за използваните алгоритми и камери в такива системи. Казахме, че можем да си разделим проекта на по-малки части и после да ги обединим. Примерно алгоритмите получават снимка като вход и който се занимава с алгоритмите, не му трябва задължително камера - може да работи с изтеглени снимки. А същевременно камерата като се подкара, ще се включи в основния проект.

Задачи, които се оформят на първо четене:
1. Спецификация - подобна на тази за Системата за достъп. Да се започне с базовите неща, в процеса на работа ще се обновява. Умения, с които ще се сблъскаме и съответно ще научим - аналитично мислене, търсене на информация (research). Документацията е много важна във всеки проект, въпреки че често се пренебрегва. Хубавата документация значи по-малко грешки, чиста работа, четимост (ако някой външен човек хване проекта, ще се ориентира лесно за всичко).
2. Камера модул за Raspberry Pi - как се подкарва, как се калибрира, как се правят снимки. Умения - python, работа с линукс (операционната система на Raspberry-то е Raspbian OS, модификация на Linux (може би Ubuntu))
3. Алгоритмите за обработка на изображенията - тука е голямата работа, ще се ползва някоя готова библиотека като OpenCV или OpenALPR, но пак е доста работа докато се накара да работи.
Умения: писане на python, image recognition
4. База данни - как ще се реализира, как ще се достъпва и ъпдейтва - махане и добавяне на номера. Ще има ли екран или ще става с отдалечен достъп някак.
5. Малко хваща и точка 4 - Вариант е да има някакъв админски режим системата, при който Rasbperry-то да пуска wifi-AP (точка за достъп), която представлява едно локално сървърче с интерфейс, който позволява да се правят разни настройки - добавяне/премахване на номера, виждане на грешки ако има и т.н. Това може да звучи сложно, но е класическа задача, навсякъде се ползва и съответно има куп матрял в интернет как се прави. 
Умения - html/javascript, пак питон, малко мрежарски знания.

